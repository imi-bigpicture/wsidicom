name: wsidicom pytest

on: [push, pull_request]

jobs:
  cache_test_images:
    name: cache test images
    runs-on: ubuntu-latest
    steps:
      - name: Prevent cache-miss on windows
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Load test images from cache
        id: cache_test_images
        uses: actions/cache@v3
        with:
          key: test-images-cache-${{ hashFiles('tests/download_test_images.py') }}
          path: tests/testdata/slides
          enableCrossOsArchive: true
      - name: Download test images if not cached
        if: steps.cache_test_images.outputs.cache-hit != 'true'
        run: python tests/download_test_images.py

  tests:
    name: Run tests ${{ matrix.os }}::py${{ matrix.python-version }}
    needs: [cache_test_images]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Prevent cache-miss on windows
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Use GNU tar instead BSD tar
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Load test images from cache
        id: cache-test-images
        uses: actions/cache@v3
        with:
          key: test-images-cache-${{ hashFiles('tests/download_test_images.py') }}
          path: tests/testdata/slides
          enableCrossOsArchive: true
      - name: Check test images are loaded
        if: steps.cache-test-images.outputs.cache-hit != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('test images were not cached')
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install poetry
      - name: Install Application
        run: python -m poetry install
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=80 --statistics
      - name: Test with pytest.
        run: python -m poetry run pytest
